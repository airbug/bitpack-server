//-------------------------------------------------------------------------------
// Indexes
//-------------------------------------------------------------------------------


// EmailToUserId
//-------------------------------------------------------------------------------

path /indexes/emailToUserId/{email}  {
    read() {
        isCurrentUserId(this) || isCurrentUserAdmin() || this == null
    }
    write() {
        (
            doesNotExist(this) || isCurrentUserId(prior(this))
        ) && (
            isCurrentUserId(this) || willNotExist(this)
        ) || (
            isCurrentUserAdmin()
        )
    }
    validate() {
        isEmailString(unescapePathPart(email)) && isExistingUserId(this) && willBeUsersEmail(this.parent().parent().parent(), this, unescapePathPart(email))
    }
}

function emailDoesNotExist(email) {
    return root.indexes.emailToUserId[escapePathPart(prior(email))] == null;
}

function willBeIndexedEmailForUserId(newRoot, email, userId) {
    return newRoot.indexes.emailToUserId[escapePathPart(email)] == userId;
}


// UsernameToUserId
//-------------------------------------------------------------------------------

path /indexes/usernameToUserId {
    read() { true }
}

path /indexes/usernameToUserId/{username}  {
    write() {
        (
            doesNotExist(this) || isCurrentUserId(prior(this))
        ) && (
            isCurrentUserId(this) || willNotExist(this)
        ) || (
            isCurrentUserAdmin()
        )
    }
    validate() {
        isUsername(username) && isExistingUserId(this) && willBeUsersUsername(this.parent().parent().parent(), this, username)
    }
}

function usernameDoesNotExist(username) {
    return root.indexes.usernameToUserId[prior(username)] == null;
}

function willBeIndexedUsernameForUserId(newRoot, username, userId) {
    return newRoot.indexes.usernameToUserId[username] == userId;
}


//-------------------------------------------------------------------------------
// PublishKey
//-------------------------------------------------------------------------------

path /publishKey/ {
    read() { false }
}

path /publishKey/{publishKey} is PublishKey {
    write() {
        doesNotExist(this) &&
        !isPackVersionPublished(this.packType, this.packClass, this.packScope, this.packName, this.packVersionNumber) &&
        isCurrentUserPackCollaborator(this.packName)
    }
    validate() { isKey(publishKey) }
}

path /publishKey/{publishKey}/key {
    validate() { this == publishKey }
}

type PublishKey extends TimeStamped {
    key: Key,
    packClas: PackClass,
    packHash: PackHash,
    packName: PackName,
    packScope: PackScope,
    packType: PackType,
    packVersionNumber: PackVersionNumber,
    usedAt: Number | Null
}

type Key extends String {
    validate() { isKey(this) }
}

function isKey(value) {
    return value.test(/^[0-9a-f]{80}$/);
}


//-------------------------------------------------------------------------------
// Packs
//-------------------------------------------------------------------------------

path /packs/{packType}/ {
    validate() { packType == 'recipe' }
}

path /packs/{packType}/{packClass}/ {
    validate() { packClass == 'gulp' }
}

path /packs/{packType}/{packClass}/{packScope}/ {
    read() { true }
    validate() { packScope == 'public' }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/info is Pack {
    write() {
        doesNotExist(this) ||
        isCurrentUserPackOwner(packType, packClass, packScope, packName) ||
        isCurrentUserAdmin()
    }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/info/class {
    validate() { this == packClass }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/info/scope {
    validate() { this == packScope }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/info/name {
    validate() { this == packName }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/info/type {
    validate() { this == packType }
}

type Pack extends TimeStamped {
    class: PackClass,
    name: PackName,
    scope: PackScope,
    type: PackType
}

type PackClass extends String {
    validate() { isPackClass(this) }
}

type PackName extends String {
    validate() { isPackName(this) }
}

type PackScope extends String {
    validate() { isPackScope(this) }
}

type PackType extends String {
    validate() { isPackType(this) }
}

function isPackClass(value) {
    return value.test('gulp');
}

function isPackName(value) {
    return value.test(/^[a-z]+(?:[a-z0-9-][a-z0-9]+)*$/);
}

function isPackScope(value) {
    return value == 'public';
}

function isPackType(value) {
    return value == 'recipe';
}


//-------------------------------------------------------------------------------
// PackCollaborators
//-------------------------------------------------------------------------------

path /packs/{packType}/{packClass}/{packScope}/{packName}/collaborators {
    write() {
        doesNotExist(this) ||
        isCurrentUserPackOwner(packType, packClass, packScope, packName) ||
        isCurrentUserAdmin()
    }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/collaborators/{userId} is PackCollaborator {
    validate() { isExistingUserId(userId) }
    write() {
        isCurrentUserId(userId) && willNotExist(this)
    }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/collaborators/{userId}/userId {
    validate() { this == userId }
}

type PackCollaborator extends TimeStamped {
    owner: Boolean,
    userId: ExistingUserId
}

function isCurrentUserPackCollaborator(packType, packClass, packScope, packName) {
    return isUserPackCollaborator(packType, packClass, packScope, packName, auth.uid);
}

function isCurrentUserPackOwner(packType, packClass, packScope, packName) {
    return isUserPackOwner(packType, packClass, packScope, packName, auth.uid);
}

function isUserPackCollaborator(packType, packClass, packScope, packName, userId) {
    return root.packs[packType][packClass][packScope][packName].collaborators[userId] !== null;
}

function isUserPackOwner(packType, packClass, packScope, packName, userId) {
    return root.packs[packType][packClass][packScope][packName].collaborators[userId].owner === true;
}


//-------------------------------------------------------------------------------
// PackVersionsInfo
//-------------------------------------------------------------------------------

path /packs/{packType}/{packClass}/{packScope}/{packName}/versionsInfo is PackVersionsInfo {
    write() { isCurrentUserPackCollaborator(packType, packClass, packScope, packName) }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/versionsInfo/last {
    validate() {
        isExistingPackVersionNumber(packType, packClass, packScope, packName, this) || (
            doesNotExist(this.parent()) && this == ''
        )
    }
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/versionsInfo/all/{versionNumber} is PackVersionNumber {
    validate() {
        this == unescapePathPart(versionNumber) &&
        willPackVersionExist(
            this.parent().parent().parent().parent().parent().parent().parent().parent(),
            packType,
            packClass,
            packScope,
            packName,
            unescapePathPart(versionNumber))
    }
}

type PackVersionsInfo extends TimeStamped {
    last: PackVersionNumber
}

function willPackVersionInfoExist(newRoot, packType, packClass, packScope, packName, packVersionNumber) {
    return newRoot.packs[packType][packClass][packScope][packName].versionsInfo.all[escapePathPart(packVersionNumber)] != null;
}


//-------------------------------------------------------------------------------
// PackVersions
//-------------------------------------------------------------------------------

path /packs/{packType}/{packClass}/{packScope}/{packName}/versions/{versionNumber} is PackVersion {
    validate() {
        isPackVersionNumber(unescapePathPart(versionNumber)) &&
        willPackVersionInfoExist(
            this.parent().parent().parent().parent().parent().parent().parent(),
            packType,
            packClass,
            packScope,
            packName,
            unescapePathPart(versionNumber))
    }
    write() {
        (
            doesNotExist(this) && isCurrentUserPackCollaborator(packType, packClass, packScope, this)
        ) || (
            isCurrentUserPackOwner(packType, packClass, packScope, packName)
        ) || (
            isCurrentUserAdmin()
        )
    }
}

type PackVersion extends TimeStamped {
    hash: PackHash,
    published: Boolean,
    semanticVersion: SemanticVersion,
    url: String,
    versionNumber: PackVersionNumber
}

path /packs/{packType}/{packClass}/{packScope}/{packName}/versions/{versionNumber}/versionNumber {
    validate() { this == unescapePathPart(versionNumber) }
}

type PackHash extends String {
    validate() { isPackHash(this) }
}

type PackVersionNumber extends String {
    validate() { isPackVersionNumber(this) }
}

type SemanticVersion {
    build: Array<BuildString>,
    major: NonNegativeInteger,
    minor: NonNegativeInteger,
    patch: NonNegativeInteger,
    prerelease: Array<PrereleaseString>,
    raw: SemanticVersionString,
    version: VersionString
}

type BuildString extends String {
    validate() { isBuildString(this) }
}

type PrereleaseString extends String {
    validate() { isPrereleaseString(this) }
}

type SemanticVersionString extends String {
    validate() { isSemanticVersionString(this) }
}

type VersionString extends String {
    validate() { isVersionString(this) }
}

function isBuildString(value) {
    return value.test(/^([0-9A-Za-z-][0-9A-Za-z-]*)$/);
}

function isExistingPackVersionNumber(packType, packClass, packScope, packName, value) {
    return isPackVersionNumber(value) && root.packs[packType][packClass][packScope][packName].versions[escapePathPart(value)] != null;
}

function isPrereleaseString(value) {
    return value.test(/^([0-9]|([1-9A-Za-z-][0-9A-Za-z-]*))$/);
}

function isPackHash(value) {
    //TODO BRN:
    return value.length > 32;
}

function isPackVersionNumber(value) {
    return isVersionString(value);
}

function isPackVersionPublished(packType, packClass, packScope, packName, packVersionNumber) {
    return root.packs[packType][packClass][packScope][packName].versions[packVersionNumber].published === true;
}

function isSemanticVersionString(value) {
    return value.test(/^[0-9]\.[0-9]\.[0-9](-([0-9]|([1-9A-Za-z-][0-9A-Za-z-]*))(\.([0-9]|([1-9A-Za-z-][0-9A-Za-z-]*)))*)?(\+([0-9A-Za-z-][0-9A-Za-z-]*)(\.([0-9A-Za-z-][0-9A-Za-z-]*))*)?$/);
}

function isVersionString(value) {
    return value.test(/^[0-9]\.[0-9]\.[0-9](-([0-9]|([1-9A-Za-z-][0-9A-Za-z-]*))(\.([0-9]|([1-9A-Za-z-][0-9A-Za-z-]*)))*)?$/);
}

function willPackVersionExist(newRoot, packType, packClass, packScope, packName, packVersionNumber) {
    return newRoot.packs[packType][packClass][packScope][packName].versions[escapePathPart(packVersionNumber)] != null;
}


//-------------------------------------------------------------------------------
// Roles
//-------------------------------------------------------------------------------

path /roles/{userId} is Role {
    read() { isCurrentUserId(userId) || isCurrentUserAdmin() }
    write() { isCurrentUserAdmin() }
    validate() { isExistingUserId(userId) }
}

type Role extends Entity {
    role: RoleString | EmptyString,
    userId: ExistingUserId
}

type RoleString extends String {
    validate() { this == 'admin' }
}

function isCurrentUserAdmin() {
    return root.roles[auth.uid].role == 'admin';
}


//-------------------------------------------------------------------------------
// Users
//-------------------------------------------------------------------------------

path /users/{userId} is User | EmptyPush {
    read() { isCurrentUserId(userId) || isCurrentUserAdmin() }
    write() { isCurrentUserId(userId) || isCurrentUserAdmin() }
}

path /users/{userId}/email  {
    validate() {
        isEmptyString(this) || (
            isEmailString(this) && emailDoesNotExist(this) && willBeIndexedEmailForUserId(this.parent().parent().parent(), this, userId)
        )
    }
}

path /users/{userId}/username {
    validate() {
        isEmptyString(this) || (
            isUsername(this) && usernameDoesNotExist(this) && willBeIndexedUsernameForUserId(this.parent().parent().parent(), this, userId)
        );
    }
}

type User extends Entity  {
    email: String,
    signedUp: Boolean,
    username: String
}

type EmailString extends String {
    validate() { isEmailString(this) }
}

type UserId extends Id {
    validate() { isUserId(this) }
}

type ExistingUserId extends String {
    validate() { isExistingUserId(this) }
}

type Username extends String {
    validate() { isUsername(this) }
}

type ExistingUsername extends String {
    validate() { isExistingUsername(this) }
}

function isCurrentUserId(userId) {
    return auth.uid === userId;
}

function hasUserId(object) {
    return object.userId !== null;
}

function isAuthenticated() {
    return auth != null;
}

function isEmailString(value) {
    return value.isString() && value.length <= 254 && value.test(/^[-!#$%&'*+\/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-?\.?[a-zA-Z0-9])*(\.[a-zA-Z](-?[a-zA-Z0-9])*)+$/);
}

function isExistingUserId(value) {
    return isUserId(value) && root.users[value] != null;
}

function isExistingUsername(value) {
    return isUsername(value) && root.indexes.usernameToUserId[value] != null;
}

function isUserId(value) {
    return isId(value);
}

function isUsername(value) {
    return value.test(/^[a-z]+(?:[a-z0-9-][a-z0-9]+)*$/);
}

function doesCurrentUserOwnObject(object) {
    return isCurrentUserId(prior(object).userId);
}

function isOwnedByOrDoesNotExistAndWillBeOwnedByCurrentUser(object) {
    return (
        doesCurrentUserOwnObject(object) || doesNotExist(object)
    ) && (
        willCurrentUserOwnObject(object)
    );
}

function willBeUsersEmail(newRoot, userId, email) {
  return newRoot.users[userId].email == email;
}

function willBeUsersUsername(newRoot, userId, username) {
  return newRoot.users[userId].username == username;
}

function willCurrentUserOwnObject(object) {
    return isCurrentUserId(object.userId);
}


//-------------------------------------------------------------------------------
// Util
//-------------------------------------------------------------------------------

type Array<T> {
    $index: ArrayIndex<T>
}

type ArrayIndex<T> extends T {
    validate() { isNumberString($index) }
}

type Entity extends TimeStamped {
    id: Id
}

type TimeStamped {
    createdAt: Number,
    updatedAt: Number
}

type EmptyPush {
    validate() { isEmptyPush(this) }
}

type EmptyString extends String {
    validate() { isEmptyString(this) }
}

type Id extends String {
    validate() { isId(this) }
}

type Integer extends Number {
    validate() { isInteger(this) }
}

type NonNegativeInteger extends Integer {
    validate() { isNonNegative(this) }
}

type NonNegativeNumber extends Number {
    validate() { isNonNegative(this) }
}

function doesExist(value) {
    return prior(value) != null;
}

function doesNotExist(value) {
    return prior(value) == null;
}

function escapePathPart(pathPart) {
    return pathPart
        .replace('.', '(P)')
        .replace('@', '(A)')
        .replace('!', '(B)')
        .replace('#', '(H)')
        .replace('$', '(D)')
        .replace('%', '(PR)')
        .replace('&', '(AN)')
        .replace('\'', '(SQ)')
        .replace('*', '(ST)')
        .replace('+', '(PL)')
        .replace('/', '(FS)')
        .replace('=', '(E)')
        .replace('?', '(Q)')
        .replace('^', '(C)')
        .replace('`', '(G)') //grave accent
        .replace('{', '(OC)')
        .replace('|', '(PI)')
        .replace('}', '(CC)');
}

function isEmptyPush(value) {
    return doesNotExistAndWillNotExist(value);
}

function isEmptyString(value) {
    return value == "";
}

function isId(value) {
    return value.test(/^-[a-zA-Z0-9_-]+$/);
}

function isInteger(value) {
    return value % 1 == 0;
}

function isNonNegative(value) {
    return value >= 0;
}

function isNumberString(value) {
    return value.test(/^[0-9]+$/);
}

function doesNotExistAndWillNotExist(value) {
    return (doesNotExist(value) && willNotExist(value));
}

function unescapePathPart(pathPart) {
    return pathPart
        .replace('(P)', '.')
        .replace('(A)', '@')
        .replace('(B)', '!')
        .replace('(H)', '#')
        .replace('(D)', '$')
        .replace('(PR)', '%')
        .replace('(AN)', '&')
        .replace('(SQ)', '\'')
        .replace('(ST)', '*')
        .replace('(PL)', '+')
        .replace('(FS)' ,'/')
        .replace('(E)', '=')
        .replace('(Q)', '?')
        .replace('(C)', '^')
        .replace('(G)', '`') //grave accent
        .replace('(OC)', '{')
        .replace('(PI)', '|')
        .replace('(CC)', '}')
}

function willExist(value) {
    return value != null;
}

function willNotExist(value) {
    return value == null;
}
